//Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target ?
//Find all unique quadruplets in the array which gives the sum of target.
//
//Note :
//	Elements in a quadruplet(a, b, c, d) must be in non - descending order. (ie, a ≤ b ≤ c ≤ d)
//	The solution set must not contain duplicate quadruplets.
//	For example, given array S = { 1 0 - 1 0 - 2 2 }, and target = 0.
//
//	A solution set is :
//(-1, 0, 0, 1)
//(-2, -1, 1, 2)
//(-2, 0, 0, 2)
//与3sum问题类似
//思想是先排序，然后按顺序取一个值作为a，再在a之后取一个b。然后再在b之后的头和尾找c和d
//注意对跳过重复数据的判断
vector<vector<int>> fourSum(vector<int>& nums, int target) {
	vector<vector<int>>result;
	vector<int>temp;
	
	if (nums.size() < 4)//特殊情况
		return result;

	sort(nums.begin(), nums.end());
	vector<int>::iterator itr_a = nums.begin();
	while (itr_a<nums.end()-2)//先确定一个a
	{
		vector<int>::iterator itr_b = itr_a + 1;//再确定一个b
		while (itr_b<nums.end()-1)
		{
			vector<int>::iterator first_itr = itr_b + 1;
			vector<int>::iterator last_itr = nums.end() - 1;
			int NewTarget = target - *itr_a - *itr_b;

			while (first_itr < last_itr) {
				if (*first_itr + *last_itr == NewTarget) {
					vector<int>().swap(temp);
					temp.push_back(*itr_a);
					temp.push_back(*itr_b);
					temp.push_back(*first_itr);
					temp.push_back(*last_itr);
					result.push_back(temp);
					while (first_itr < last_itr && *(first_itr) == temp[2])   first_itr++;//跳过重复的数据，注意即时没有重复数据，也是会加1的
					while (first_itr < last_itr && *(last_itr) == temp[3])     last_itr--;
				}
				else if (*first_itr + *last_itr < NewTarget) {
					first_itr++;
				}
				else
					last_itr--;
			}
			while (itr_b < nums.end() - 1 && *(itr_b + 1) == *itr_b)//对于重复的b，跳过
				itr_b++;
			itr_b++;
		}
	while (itr_a < nums.end() - 2 && *(itr_a + 1) == *itr_a)//对于重复的a，跳过
		itr_a++;
	itr_a++;
	}
return result;
}
