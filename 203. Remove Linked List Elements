#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include<numeric>
#include<string>
using namespace std;

 struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};
//思路： 用两个指针，p指针遍历链表，prev指针在p的左边
ListNode* removeElements(ListNode* head, int val) {
	if (!head)
		return head;
	ListNode* pHelp = (ListNode*)malloc(sizeof(ListNode));
	pHelp->next = head;
	pHelp->val = -1;
	ListNode *p = head;
	ListNode* prev = pHelp;
	while (p) {
		if (p->val == val) {
			prev->next = p->next;
			p->next = nullptr;
			delete p;
			p = prev->next;
		}
		else {
			p = p->next;
			prev = prev->next;
		}	
	}
	return pHelp->next;
}
void main() {
	ListNode* p1 = (ListNode*)malloc(sizeof(ListNode));
	p1->val = 1;
	p1->next = nullptr;

	ListNode* p2 = (ListNode*)malloc(sizeof(ListNode));
	p2->val = 2;
	p2->next = nullptr;

	/*ListNode* p3 = (ListNode*)malloc(sizeof(ListNode));
	p3->val = 3;
	p3->next = nullptr;*/

	/*ListNode* p4 = (ListNode*)malloc(sizeof(ListNode));
	p4->val = 4;
	p4->next = nullptr;*/
	
	p1->next = p2;
	//p2->next = p3;
	//p3->next = p4;

	bool res=isPalindrome(p1);
	cin.get();
}
