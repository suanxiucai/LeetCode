#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include<numeric>
#include<string>
using namespace std;

 struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};
//思路 分为三步 1找到链表的中点，将链表分为两个 2将第二个链表翻转 3将两个链表合并
ListNode* ReverseList(ListNode* head) {
	if (head == nullptr || head->next == nullptr)
		return head;
	ListNode* pHelp = (ListNode*)malloc(sizeof(ListNode));
	pHelp->val = -1;
	pHelp->next = head;
	ListNode* p0 = pHelp;
	ListNode* p1 = pHelp->next;
	ListNode* p2 = pHelp->next->next;
	while (p2)
	{
		p1->next = p2->next;
		p2->next = p0->next;
		p0->next = p2;
		p2 = p1->next;
	}
	return pHelp->next;
}
void MergeTwoList(ListNode* head1, ListNode* head2) {
	ListNode* p1 = head1;
	ListNode* p2 = head2;
	ListNode* prev = nullptr;
	while (p1)
	{
		prev = p1;
		ListNode* pTemp = p2->next;
		p2->next = p1->next;
		p1->next = p2;
		p2 = pTemp;
		prev = p1->next;
		p1 = p1->next->next;
	}
	if (p1 == nullptr && p2 != nullptr) {
		p2->next = prev->next;
		prev->next = p2;
	}
}
void reorderList(ListNode* head) {
	if (head == nullptr || head->next == nullptr)
		return;
	ListNode* p1 = head;
	ListNode* p2 = p1;
	ListNode* prev = nullptr;
	while (p2 && p2->next) {//注意判断条件  重点
		prev = p1;
		p1 = p1->next;
		p2 = p2->next->next;
	}
	prev->next = nullptr;
	ListNode* NewHead = ReverseList(p1);//翻转
	MergeTwoList(head, NewHead);//合并
}

void main() {
	ListNode* p1 = (ListNode*)malloc(sizeof(ListNode));
	p1->val = 1;
	p1->next = nullptr;

	ListNode* p2 = (ListNode*)malloc(sizeof(ListNode));
	p2->val = 2;
	p2->next = nullptr;

	ListNode* p3 = (ListNode*)malloc(sizeof(ListNode));
	p3->val = 3;
	p3->next = nullptr;

	/*ListNode* p4 = (ListNode*)malloc(sizeof(ListNode));
	p4->val = 4;
	p4->next = nullptr;*/
	
	p1->next = p2;
	p2->next = p3;
	//p3->next = p4;

	reorderList(p1);
	cin.get();
}
