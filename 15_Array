
//15. 3Sum
//Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0 ?
//Find all unique triplets in the array which gives the sum of zero.
//
//Note :
//	Elements in a triplet(a, b, c) must be in non - descending order. (ie, a ≤ b ≤ c)
//	The solution set must not contain duplicate triplets.
//	For example, given array S = { -1 0 1 2 - 1 - 4 },
//
//	A solution set is :
//(-1, 0, 1)
//(-1, -1, 2)

	

vector<vector<int>> threeSum(vector<int>& nums) {
	vector<vector<int>>Result;
	if (nums.empty())
		return Result;
	sort(nums.begin(), nums.end());
	for (unsigned int i = 0; i < nums.size()-1; i++) {
		int target = -nums[i];
		int first = i + 1;//只在之后的范围内搜索，不往回搜索，可以防止重复，例如-1 0 1，如果对每个数字都全局搜索
		                  //则会产生三个一样的结果。
		int last = nums.size() - 1;
		while (first < last) {
			if (nums[first] + nums[last] == target) {
				vector<int>res;
				res.push_back(nums[i]);
				res.push_back(nums[first]);
				res.push_back(nums[last]);
				while (first < last && nums[first] == res[1])  ++first;//即时没有重复数字，也会自加一次
				while (first < last && nums[last] == res[2])   --last;//即时没有重复数字，也会自加一次
				Result.push_back(res);
			}
			else if (nums[first] + nums[last] < target)
				++first;
			else
				--last;
		}
		while ((i + 1) < nums.size() && nums[i + 1] == nums[i])//处理重复的nums[i]；
			++i;
	}
	return Result;

}
