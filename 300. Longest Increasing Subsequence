考虑{arr[0],...,arr[i]}的最长递增子序列时需要找到所有比arr[i]小的arr[j]，且j<i，结果应该是所有{arr[0],...,arr[j]}的最长递增子序列中最长的那一个再加1。即我们需要一个辅助的数组dp，dp[i]的值是以arr[i]结尾的序列{arr[0],...,arr[i]}的最长递增子序列的长度，
dp[0]=1。dp[i] = max{dp[j]+1}, (1<=j<i,a[j]<a[i]).时间复杂度为o(n^2); 

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.empty())  return 0;
        vector<int>dp(nums.size());
        dp[0]=1;//第一个元素，初始化为1
        for(int i=1;i<nums.size();i++){
            int MAX=INT32_MIN;//为了找到之前元素序列中最大的dp值
            for(int j=i-1;j>=0;j--){
                if(nums[j]<nums[i])
                    MAX=max(MAX,dp[j]);//找到最大dp值
            }
            dp[i]=(MAX!=INT32_MIN)?MAX+1:1;//如果在之前的序列中找到了最大值，就将最大值加1，如果之前的序列中没有一个比当前元素小的，没有进入
			                              //上面第二个for中的if语句，那就dp[i]赋值为1
    }
    return *max_element(dp.begin(),dp.end());//返回dp中最大值
}
};

如果我们在已有以上dp数组的情况下，返回最长递增子序列。
1：找到dp数组中的最大值和相应的位置。例如dp={1 1 2 2 3 3 4 5 4 }；则最大值为5，位置为7。说明最长的序列以arr[7]结尾，长度为5； 2：从arr的第7个开始向前找，如果arr[i]<arr[7] && dp[i]==dp[7]-1;那么arr[i]就是递增序列的倒数第二个数
3：以此类推

 vector<int>  func(vector<int> arr,vector<int> dp){
	int index=(max_element(dp.begin(),dp.end())-dp.begin());
	int max_len=*max_element(dp.begin(),dp.end());
	vector<int>LIS(max_len);
	LIS[--max_len]=arr[index];
	for(int i=index;i>=0;i--){
		if(arr[i]<arr[index] && dp[i]==dp[index]-1){
			LIS[--max_len]=arr[i];
			index=i;
		}
	}
	return LIS;
 }
 
 这样简单的复杂度为O(n^2)，其实还有更好的方法。
 以上的算法是o(n^2)的，主要原因是在于第二个for循环中找max{dp[j]+1}, (1<=j<i,a[j]<a[i])
   考虑两个数a[x]和a[y]，x<y且a[x]<a[y],且dp[x]=dp[y]，当a[t]要选择时，到底取哪一个构成最优的呢？显然选取a[x]更有潜力，因为可能存在
   a[x]<a[z]<a[y]，这样a[t]可以获得更优的值。在这里给我们一个启示，当dp[t]一样时，尽量选择更小的a[x].
   按dp[t]=k来分类，只需保留dp[t]=k的所有a[t]中的最小值，设d[k]记录这个值，d[k]=min{a[t]},(dp[t]=k)。dp不在需要了。这时注意到d的两个特点（重要）：
	1. d[k]在计算过程中单调不降；           
	2. d数组是有序的，d[1]<d[2]<..d[n]。
   利用这两个性质，可以很方便的求解：
	1. 设当前已求出的最长上升子序列的长度为len（初始时为1），每次读入一个新元素x：
	2. 若x>d[len]，则直接加入到d的末尾，且len++；（利用性质2）
	否则，在d中二分查找，从左到右找到第一个大于x的数d[k]，使d[k]=x，在这里x<=d[k+1]一定成立（性质1,2）。
	例如：
	arr：10, 9, 2, 5, 3, 7, 101, 18
    数组d更新过程
	10 
	9
	2
	2,5
	2,3
	2,3,7
	2,3,7,101
	2,3,7,18
	
class Solution {
public:
	int Bsearch(vector<int>d, int right, int key) {
		int left = 0;
		while (left <= right) {
			int mid = (left + right) >> 1;
			if (key>d[mid] && key <= d[mid + 1])//注意条件 可以取等号
				return mid;
			else if (key > d[mid])
				left = mid + 1;
			else
				right = mid - 1;
		}
		return -1;//如果没有找到，肯定是比d中最小的元素还小，那么就是要修改d[0]
	}
	int lengthOfLIS(vector<int>& nums) {
		if (nums.empty())
			return 0;
		vector<int>dp(nums.size());//这种方法可以不记录dp，只利用d。这里把两个都写上了
		vector<int>d(nums.size());
		dp[0]=1;
		d[0] = nums[0];
		int len = 0;//为d的有效长度减1
		int j = 0;
		for (int i = 1; i<nums.size(); i++) {
			if (nums[i] > d[len])//如果比d中最大的元素还大
				j = ++len;
			else {
				int pos = Bsearch(d, len, nums[i]);//二分查找
				j = pos + 1;
			}
			d[j] = nums[i];
			dp[i] = j + 1;
		}
		return len + 1;//d的长度就是最长递增序列的长度
		//return *max_element(dp.begin(),dp.end());
	}
};

	
	
