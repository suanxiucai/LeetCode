#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include<numeric>
#include<string>
using namespace std;

//思路 不要考虑着找到每一个阶段(单调增或单调减)内的最大值和最小值。因为我们是从前往后遍历的，所以只要保留一个最小值就可以，然后看res
//的更新情况
int maxProfit(vector<int>& prices) {
	if (prices.size() <= 1)
		return 0;
	int min_price = prices[0];
	int res = 0;
	for (int i = 0; i < prices.size(); i++) {
		if (prices[i] < min_price)
			min_price = prices[i];
		else {
			res = ((prices[i] - min_price)>res) ? ((prices[i] - min_price)) : res;
		}
	}
	return res;
}

void main() {
	vector<int>a = { 4,1,2};
	int res= maxProfit(a);
	cin.get();
}
