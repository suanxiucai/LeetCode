#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include<numeric>
#include<string>
using namespace std;
//思路 p1指向已排好的奇数序列的最后一个，p0是p1之前的一个，p2动态的指向要调整的元素
 struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};
ListNode* oddEvenList(ListNode* head) {
	if (!head || !head->next || !head->next->next)//一个元素 两个元素是都不用操作
		return head;
	ListNode Help(-1);//辅助头
	Help.next = head;
	ListNode *p0 = head;
	ListNode *p1 = head->next;
	ListNode *p2 = head->next->next;
	while (p2)
	{
		p1->next = p2->next;
		p2->next = p0->next;
		p0->next = p2;
		p0 = p0->next;
		p1 = p1->next;
		p2 = (p1) ? p1->next : nullptr;//注意判断p1
	}
	return Help.next;
}
void main() {
	ListNode* p1 = (ListNode*)malloc(sizeof(ListNode));
	p1->val = 1;
	p1->next = nullptr;

	ListNode* p2 = (ListNode*)malloc(sizeof(ListNode));
	p2->val = 2;
	p2->next = nullptr;

	ListNode* p3 = (ListNode*)malloc(sizeof(ListNode));
	p3->val = 3;
	p3->next = nullptr;

	ListNode* p4 = (ListNode*)malloc(sizeof(ListNode));
	p4->val = 4;
	p4->next = nullptr;

	ListNode* p5 = (ListNode*)malloc(sizeof(ListNode));
	p5->val = 5;
	p5->next = nullptr;

	
	p1->next = p2;
	//p2->next = p3;
	p3->next = p4;
	//p4->next = p5;

	ListNode* res= getIntersectionNode(p1,p3);
	cin.get();
}
