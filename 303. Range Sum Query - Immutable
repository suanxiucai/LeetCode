#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include<numeric>
#include<string>
using namespace std;
//在构造函数内就计算了从第一个元素到当前元素所有元素的和，
//保存到数组sum的对应位置中，在函数sumRange中就可以很方便地算出题目中要求的结果了。
class NumArray {
public:
	NumArray(vector<int> &nums) {
		this->nums = nums;
		sum.push_back(0);//注意
		for (int i = 0; i<nums.size(); i++)
			sum.push_back(sum.back() + nums[i]);//注意back函数是返回最后一个元素的引用
	}

	int sumRange(int i, int j) {
		if (i >= 0 && j >= 0 && i <= j && j<nums.size())
			return (sum[j + 1] - sum[i]);
		else
			return 0;
	}
	vector<int>sum;
	vector<int>nums;
};


void main() {
	vector<int>nums = { -2,0,3,-5,2,-1 };
	NumArray numArray(nums);
	int a=numArray.sumRange(0, 2);
} 
