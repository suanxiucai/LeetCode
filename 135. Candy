#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include<numeric>
#include<string>
using namespace std;
//思路：从权值最小的孩子开始分配。如果他比左右邻居的小孩的某一个权值大，那么他的糖果数就要比邻居的多1
int candy(vector<int>& ratings) {
	multimap<int, int>count;
	int len = ratings.size();
	vector<int>Candy(len, 1);//赋初值为1

	if (len == 0)  return 0;
	if (len == 1)  return 1;

	for (int i = 0; i < len; i++)//count中的关键子是权值，对应的值是孩子位置的索引，因为map有排序的功能，所以这样方便下面根据
		count.insert({ratings[i],i});//权值由小到大开始分配。注意可能有相同的权值 用multimap！！！

	for (multimap<int, int>::iterator itr = count.begin(); itr != count.end(); itr++) {
		int index = itr->second;
		if (index != 0 && index != len - 1) {//如果孩子不是在两头，则有两个邻居
			if (ratings[index] > ratings[index - 1] && ratings[index] > ratings[index + 1])//比两个邻居都大
				Candy[index] = max(Candy[index - 1], Candy[index + 1]) + 1;
			else if ((ratings[index] > ratings[index - 1] && ratings[index] <= ratings[index + 1]))//比左邻居大 注意对等号的判断
				Candy[index] = Candy[index - 1] + 1;
			else if ((ratings[index] <= ratings[index - 1] && ratings[index] > ratings[index + 1]))//比右邻居大 注意对等号的判断
				Candy[index] = Candy[index + 1] + 1;
			else//比两个邻居都小
				Candy[index] = 1;
		}
		else if (index == 0) {//在队首，右边有邻居
			if (ratings[index] > ratings[index + 1])
				Candy[index] = Candy[index + 1] + 1;
		}
		else {//在队尾，左边有邻居
			if (ratings[index] > ratings[index - 1])
				Candy[index] = Candy[index - 1] + 1;
		}
	}

	int result = 0;
	for (auto i : Candy) {
		result += i;
	}

	return result;
}
void main() {
	vector<int>a = {1,2,2};
	int b = candy(a);
	cout << endl;
	cout << b;
}

