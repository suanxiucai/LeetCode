//Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
//
//If such arrangement is not possible, it must rearrange it as the lowest possible order(ie, sorted in ascending order).
//
//The replacement must be in - place, do not allocate extra memory.
//
//Here are some examples.Inputs are in the left - hand column and
//its corresponding outputs are in the right - hand column.
//1, 2, 3 → 1, 3, 2
//3, 2, 1 → 1, 2, 3
//1, 1, 5 → 1, 5, 1


#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include<numeric>
using namespace std;

void Compare(vector<int>& nums, vector<int>::iterator itr_2) {
	//函数思想，用一个multimap将比自己大数都存起来，关键字是序列中本身的值，关键字对应的数据是距离正在分析的数字的位置的距离
	int gap = 1;
	multimap<int, int>count;
	while ((itr_2+gap)!= nums.end()) {
		if (*(itr_2+gap)> *itr_2) {
			count.insert({ *(itr_2 + gap) ,gap});
		}
		gap++;
	}
	auto temp_itr=count.equal_range(count.begin()->first);
	//现在multimap中存的都是比正在分析位的值大的数的信息，是有序的，所以第一组数据的就是
	//我们想要的，但是关键字会有重复.例如2 3 1 3 3 我们分析到1 的时候，右侧比1大的有两个3
	//如果我们与倒数第二个3交换，变成2 3 3 1 3，再经过主程序中的右侧的一个翻转，就变成了2 3 3  3 1
	//如果我们与倒数第一个3交换，变成2 3  3 3 1 ，再经过主程序中的右侧的一个翻转，就变成了2 3 3  1 3
	//显然第二种处理是对的。因此，我们要跳过multimap前面的重复的部分，找到最后一个。
	//temp_itr是一个pair，里面是对关键字查询结果的一个范围，左闭右开，是两个迭代器
	if (!count.empty())
		swap(*itr_2, *(itr_2 + ((--temp_itr.second)->second)));//temp_itr.second是取到第二个迭代器，然后--是因为区间是左闭右开的，
                                                        		//然后再去second才得到里面存的gap
}
//思想：从例子1 2 3 --> 1 3 2来看，从右开始分析这些数字，看没有位数字右侧有没有比自己的大的，
//有的话就从比自己大的数字里选最小（！！！！！）的，然后交换，并且程序结束
//例如从右开始 3右侧没有比自己大的，跳过；2右侧有个3比自己大 则交换变成了1 3 2 结束；
//对于1 3 2  最右侧的2跳过；3右侧没有比自己大的，跳过；1右侧有两个比自己大的，选自己大的中间的最小的，就是2，交换后是2 3 1；此时我们
//观察 3 1是个从右向左递增的序列，所以应该再来个翻转，变成2 1 3；
//总结：
//1：从右到左逐位的分析
//2：如果右侧有比自己大的，则选择其中最小的与自己交换
//3：将右半部分翻转，变成降序；
void nextPermutation(vector<int>& nums) {
	if (nums.size()<=1)
		return; 
	vector<int>::iterator itr_1 = nums.begin();
	vector<int>::iterator itr_2 = nums.end() - 2;//从倒数第二位开始分析
	bool flag = false;//用于表示是否进行了交换
	while (itr_2>itr_1)
	{
		vector<int>::iterator temp = max_element(itr_2, nums.end());
		if (temp != itr_2) {//如果temp和itr_2不相等，证明右侧有比自己大的数，但是我们要找其中的最小值
			Compare(nums,itr_2);//用于交换的函数
			reverse(itr_2 + 1, nums.end());//将右半部分进行翻转，重要！！！
			flag = true;//一旦发生了交换，则整个程序结束
			break;
		}
		else
			--itr_2;
	}
	if (!flag && itr_1 == itr_2) {//如果处理到了最左侧的那位，主要是对上面那个循环的--itr_2没处理好，所以单独拿出来处理
		vector<int>::iterator temp = max_element(itr_2, nums.end());
		if (temp != itr_2) {
			Compare(nums, itr_2);
			reverse(itr_2 + 1, nums.end());
		}
		else
			reverse(nums.begin(), nums.end());//如果数字全都处理完了还是没有发生交换，则怎么原始的序列时从右向左递增的，因此整体翻转
	}		
}

void main() {
	vector<int>a1 = {2,3,1,3,3};
	vector<int>a2 = { 3,2,1 };
	vector<int>a3 = { 1,1,5 };
	vector<int>a4 = { 1,3,2 };
	nextPermutation(a1);
	nextPermutation(a2);
	nextPermutation(a3);
	nextPermutation(a4);
	cin.get();
}
