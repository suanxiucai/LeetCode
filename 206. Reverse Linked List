#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include<numeric>
#include<string>
using namespace std;

 struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

 ListNode* LinkedListCreatH()//构造链表的辅助函数
 {
	 ListNode *L;
	 L = (ListNode *)malloc(sizeof(ListNode));   //申请头结点空间
	 L->next = NULL;                      //初始化一个空链表

	 int x;                         //x为链表数据域中的数据
	 cout << "输入";
	 int i = 0;
	 while (i<3)
	 {
		 cin >> x;
		 ++i;
		 ListNode *p;
		 p = (ListNode *)malloc(sizeof(ListNode));   //申请新的结点 
		 p->val = x;                     //结点数据域赋值 
		 p->next = L->next;                    //将结点插入到表头L-->|2|-->|1|-->NULL 
		 L->next = p;
	 }
	 cout << "结束";
	 return L;
 }
//思路：由于没有头指针，所以自己加一个辅助的头指针pHelp，返回的时候再去掉。
 //对于特殊情况：空链表、一个结点的链表 直接返回
 //如果不是特殊情况，加上辅助的头结点，则链表至少有三个结点，分别用三个指针，p0指向辅助头，p1指向原来的第一个结点，p2动态的指向要调整
 //的结点。注意，我们从第二个结点开始调换，第一个结点不需要操作。
 ListNode* reverseList(ListNode* head) {
	if (head == nullptr || head->next == nullptr)//特殊情况
		return head;
	ListNode* pHelp = (ListNode*)malloc(sizeof(ListNode));//辅助头
	pHelp->val = -1;
	pHelp->next = head;
	ListNode* p0 = pHelp;
	ListNode* p1 = pHelp->next;
	ListNode* p2 = pHelp->next->next;
	while (p2)//p2指向要调换的结点 p0 p1一直保持不动
	{
		p1->next = p2->next;
		p2->next = p0->next;
		p0->next = p2;
		p2 = p1->next;
	}
	return pHelp->next;//去掉辅助头
 }

void main() {
	
}
