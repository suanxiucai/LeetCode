/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
     ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
	 if (!l1)
		 return l2;
	 if (!l2)
		 return l1;
	 ListNode* pHelp = (ListNode*)malloc(sizeof(ListNode));
	 pHelp->val = -1;
	 pHelp->next = nullptr;
	 ListNode* p0 = pHelp;
	 ListNode* p1 = l1;
	 ListNode* p2 = l2;
	 ListNode* p1_next = nullptr;
	 ListNode* p2_next = nullptr;
	 while (p1 || p2)
	 {
		 p1_next = (p1) ? p1->next : nullptr;
		 p2_next = (p2) ? p2->next : nullptr;
		 int val_p1 = (p1) ? p1->val : INT32_MAX;
		 int val_p2 = (p2) ? p2->val : INT32_MAX;
		 if (val_p1 <= val_p2) {
			 p1->next = p0->next;
			 p0->next = p1;
			 p0 = p0->next;
			 p1 = p1_next;
		 }
		 else {
			 p2->next = p0->next;
			 p0->next = p2;
			 p0 = p0->next;
			 p2 = p2_next;
		 }
	 }
	return pHelp->next;
 }


 ListNode *mergeKLists(vector<ListNode *> &lists) {
	 int n = lists.size();
	 if (n == 0)return NULL;
	 while (n >1)
	 {
		 int k = (n + 1) / 2;
		 for (int i = 0; i < n / 2; i++)
			 lists[i] = mergeTwoLists(lists[i], lists[i + k]);
		 n = k;
	 }
	 return lists[0];
 }
};
