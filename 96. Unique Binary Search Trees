//例如n=5  则1 2 3 4 5 都可以做根。一旦某个数i做根节点，那么比i小的数[1 2 3...i-1]只能做左子树，比i大的[i+1//.....n]做右子树。并且需要注意，这些数都是顺序排列的。对于1 2 3 能组成的BTS数目和8 9 //10能组成的BTS数目是一样的。也就是说只和区间内数的个数有关系。因此统计左子树区间数的个数和右子树区间数的个数作为变量。
//dp[n]=sigma(dp[j-1]*dp[n-j])  (j=1...n)注意是乘号
class Solution {
public:
    int numTrees(int n) {
        if(n<=0)  return 0;
        if(n==1)  return 1;
        vector<int>dp(n+1,0);
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            for(int j=1;j<=i;j++){//对于[1...i]区间的数，每个数都可以做根
                dp[i]+=dp[j-1]*dp[i-j];
            }
        }
        return dp[n];
    }
};
